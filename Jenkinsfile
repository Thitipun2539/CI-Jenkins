def COLOR_MAP = [
    'SUCCESS': 'good', // Slack color code for successful builds
    'FAILURE': 'danger' // Slack color code for failed build
]
pipeline {
    agent any
    // Define the tools required for the pipeline
    tools {
        maven "MAVEN3" // Use the Maven tool named "MAVEN3"
        jdk "OracleJDK8" // Use the JDK tool named "OracleJDK8"
    }

    environment {
        // Define environment variables to be used to set up Nexus
        SNAP_REPO = "vprofile-snapshot" // Snapshot repository name
        NEXUS_USER = "admin" // Nexus repository user
        NEXUS_PASS = "admin123" // Nexus repository password
        RELEASE_REPO = "vprofile-release" // Release repository name
        CENTRAL_REPO = "vpro-maven-central" // Central repository name
        NEXUSIP = "172.31.60.150" // Private IP of Nexus server
        NEXUSPORT = "8081" // Port number of Nexus server
        NEXUS_GRP_REPO = "vpro-maven-group" // Group repository name in Nexus
        NEXUS_LOGIN = "nexuslogin" // Nexus login credentials (username:password)
        SONARSERVER = "sonarserver" // SonarQube server identifier
        SONARSCANNER = "sonarscanner" // SonarQube scanner tool identifier
    }

    stages {
        // Define the stages of the pipeline
        stage('Build') {
            steps {
                // Execute Maven build command
                sh 'mvn -s settings.xml -DskipTests install' // Run Maven with custom settings and skip tests
            }
            post {
                success {
                    // Archive artifacts if the build is successful
                    echo "Now Archiving." // Print message indicating archiving
                    archiveArtifacts artifacts: '**/*.war' // Archive all .war files generated by the build
                }
            }
        }

        stage('Test') {
            steps {
                // Execute Maven test command
                sh 'mvn -s settings.xml test' // Run Maven tests
            }
        }

        stage('Checkstyle Analysis') {
            steps {
                // Execute Maven Checkstyle plugin
                sh 'mvn -s settings.xml checkstyle:checkstyle' // Run Checkstyle analysis to ensure code adheres to standards
            }
        }

        stage('Sonar Analysis') {
            environment {
                scannerHome = tool "${SONARSCANNER}"
            }
            steps {
                withSonarQubeEnv("${SONARSERVER}") {
                    // Execute the SonarQube scanner with project-specific properties
                    sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                    -Dsonar.projectName=vprofile \
                    -Dsonar.projectVersion=1.0 \
                    -Dsonar.sources=src/ \
                    -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                    -Dsonar.junit.reportsPath=target/surefire-reports/ \
                    -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                    -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage("UploadArtifact"){
            steps{
                // Upload artifact to Nexus repository
                nexusArtifactUploader(
                  nexusVersion: 'nexus3', // Specify Nexus version
                  protocol: 'http', // Use HTTP protocol for the upload
                  nexusUrl: "${NEXUSIP}:${NEXUSPORT}", // Nexus server URL
                  groupId: 'QA', // Group ID for the artifact
                  version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}", // Use build ID and timestamp as version
                  repository: "${RELEASE_REPO}", // Target release repository in Nexus
                  credentialsId: "${NEXUS_LOGIN}", // Credentials ID for authentication
                  artifacts: [
                    [artifactId: 'vproapp', // Artifact ID
                     classifier: '', // No classifier specified
                     file: 'target/vprofile-v2.war', // Path to the WAR file to be uploaded
                     type: 'war'] // Artifact type
                  ]
                )
            }
        }
    }
    post {
        always {
            // Send a Slack notification after the pipeline completes
            echo 'Slack Notification.' // Log message indicating Slack notification is being sent
            slackSend channel: '#devopscicd', // Slack channel to send the notification to
                color: COLOR_MAP[currentBuild.currentResult], // Set the notification color based on build result
                message: "*${currentBuild.currentResult}:* Job ${evn.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${evn.BUILD_URL}" // Format the Slack message with build details
        }
    }
}
